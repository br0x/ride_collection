{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func keyAssetId(address: String) = { "%s%s__assetId__" + address }
func keyAmount(address: String) = { "%s%s__amount__" + address }
func keyPartner(address: String) = { "%s%s__partner__" + address }
func keyWantedAssetId(address: String) = { "%s%s__wantedAssetId__" + address }
func keyWantedAmount(address: String) = { "%s%s__wantedAmount__" + address }

func toStr(assetId: ByteVector|Unit) = {
    if (assetId == unit) then "WAVES" else assetId.value().toBase58String()
}

func fromStr(assetIdStr: String) = {
    if (assetIdStr == "WAVES") then unit else assetIdStr.fromBase58String()
}

func crossCheckAssetIds(partnerAddress: String, myOfferedAssetId: String, myWantedAssetId: String, 
                        partnerOfferedAssetId: String, partnerWantedAssetId: String) = {
    if (partnerOfferedAssetId != myWantedAssetId || partnerWantedAssetId != myOfferedAssetId) then 
        throw("AssetIds don't match: you want " + myWantedAssetId + " and pay " + myOfferedAssetId +
        ", but " + partnerAddress + " wants " + partnerWantedAssetId + " and pays " + partnerOfferedAssetId) else true
}

func crossCheckAmounts(partnerAddress: String, myOfferedAmount: Int, myWantedAmount: Int, 
                       partnerOfferedAmount: Int, partnerWantedAmount: Int) = {
    if (partnerOfferedAmount != myWantedAmount || partnerWantedAmount != myOfferedAmount) then 
        throw("Amounts don't match: you want " + myWantedAmount.toString() + " and pay " + myOfferedAmount.toString() +
        ", but " + partnerAddress + " wants " + partnerWantedAmount.toString() + " and pays " + partnerOfferedAmount.toString()) else true
}

func checkAsset(wantAssetId: String) = {
    let asset = wantAssetId.fromStr()
    if (asset != unit && assetInfo(asset.value()) == unit) then throw("Invalid wantAssetId: assetInfo missing") else
    asset.toStr()
}

# Simple escrow
# Each of partners agree on wanted assetIds and amounts before calling this function
# Only one deal per address is allowed simultaneously
# Use "WAVES" to enter WAVES asset
@Callable(i)
func escrow(wantAssetId: String, wantAmount: Int, partnerAddress: String) = {
    let caller = i.caller.toString()
    if (getString(this, keyAssetId(caller)).isDefined()) then throw("You already have an active deal, please cancel it first") else
    if (i.payments.size() != 1) then throw("Exactly 1 payment expected") else
    strict partner = addressFromStringValue(partnerAddress)
    let wantedAssetId = checkAsset(wantAssetId)
    if (wantAmount <= 0) then throw("Non-positive wantAmount") else
    let partnerAssetId = getString(this, keyAssetId(partnerAddress))
    let myAssetId = i.payments[0].value().assetId
    let myAmount = i.payments[0].value().amount
    if (partnerAssetId.isDefined()) then { # partner was first, try to finish the deal
        if (getString(this, keyPartner(partnerAddress)).value() != caller) then throw("You are not a partner of " + partnerAddress) else
        strict check = crossCheckAssetIds(partnerAddress, myAssetId.toStr(), wantedAssetId, partnerAssetId.value(), getString(this, keyWantedAssetId(partnerAddress)).value())
            && crossCheckAmounts(partnerAddress, myAmount, wantAmount, getInteger(this, keyAmount(partnerAddress)).value(), getInteger(this, keyWantedAmount(partnerAddress)).value())
        [
            ScriptTransfer(partner, myAmount, myAssetId),
            ScriptTransfer(i.caller, wantAmount, wantedAssetId.fromStr()),
            DeleteEntry(keyAssetId(partnerAddress)),
            DeleteEntry(keyAmount(partnerAddress)),
            DeleteEntry(keyPartner(partnerAddress)),
            DeleteEntry(keyWantedAssetId(partnerAddress)),
            DeleteEntry(keyWantedAmount(partnerAddress))
        ]
    } else { # partner didn't call escrow() yet - we're first 
        [
            StringEntry(keyAssetId(caller), myAssetId.toStr()),
            IntegerEntry(keyAmount(caller), myAmount),
            StringEntry(keyPartner(caller), partnerAddress),
            StringEntry(keyWantedAssetId(caller), wantedAssetId),
            IntegerEntry(keyWantedAmount(caller), wantAmount)
        ]
    }
}

# Cancel active deal
@Callable(i)
func cancel() = {
    let caller = i.caller.toString()
    let assetIdKey = keyAssetId(caller)
    let assetIdRaw = getString(this, assetIdKey)
    if (!assetIdRaw.isDefined()) then throw("You don't have an active deal") else
    let assetIdStr = assetIdRaw.value()
    [
        ScriptTransfer(i.caller, getInteger(this, keyAmount(caller)).value(), assetIdStr.fromStr()),
        DeleteEntry(assetIdKey),
        DeleteEntry(keyAmount(caller)),
        DeleteEntry(keyPartner(caller)),
        DeleteEntry(keyWantedAssetId(caller)),
        DeleteEntry(keyWantedAmount(caller))
    ]
}

#@Verifier(tx)
#func verify() = false